/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "k8s.io/delay-job-controller/controller/delayjob/v1"
)

// DelayJobLister helps list DelayJobs.
// All objects returned here must be treated as read-only.
type DelayJobLister interface {
	// List lists all DelayJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DelayJob, err error)
	// DelayJobs returns an object that can list and get DelayJobs.
	DelayJobs(namespace string) DelayJobNamespaceLister
	DelayJobListerExpansion
}

// delayJobLister implements the DelayJobLister interface.
type delayJobLister struct {
	indexer cache.Indexer
}

// NewDelayJobLister returns a new DelayJobLister.
func NewDelayJobLister(indexer cache.Indexer) DelayJobLister {
	return &delayJobLister{indexer: indexer}
}

// List lists all DelayJobs in the indexer.
func (s *delayJobLister) List(selector labels.Selector) (ret []*v1.DelayJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DelayJob))
	})
	return ret, err
}

// DelayJobs returns an object that can list and get DelayJobs.
func (s *delayJobLister) DelayJobs(namespace string) DelayJobNamespaceLister {
	return delayJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DelayJobNamespaceLister helps list and get DelayJobs.
// All objects returned here must be treated as read-only.
type DelayJobNamespaceLister interface {
	// List lists all DelayJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DelayJob, err error)
	// Get retrieves the DelayJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.DelayJob, error)
	DelayJobNamespaceListerExpansion
}

// delayJobNamespaceLister implements the DelayJobNamespaceLister
// interface.
type delayJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DelayJobs in the indexer for a given namespace.
func (s delayJobNamespaceLister) List(selector labels.Selector) (ret []*v1.DelayJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DelayJob))
	})
	return ret, err
}

// Get retrieves the DelayJob from the indexer for a given namespace and name.
func (s delayJobNamespaceLister) Get(name string) (*v1.DelayJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("delayjob"), name)
	}
	return obj.(*v1.DelayJob), nil
}
